WARNING: Under construction

TITLE: Splitting node and array allocation in C++

AUTHOR: Marcelo Zimbres

Target audience

  - Realtime/embedded programming.
  - Games, high performace, 24/7 availability.
  - Should be usefull for c++ programmers in general.

Implementation available on github.

Allocators
======================================================================

  - Abstraction to memory allocation inside containers.
  - All standard containers with the exception of std::array request
    memory from their allocator internally.

    template<class T, class Allocator = std::allocator<T>>
    class list;

Allocator interface used by the container

  std::allocator<int> alloc;
  int* p = alloc.allocate(n);
  alloc.deallocate(p, n);

Splitting containers according to their allocation properties
======================================================================

If we exclude std::array that does not use an allocator, we can divide
containers in two groups.

(A) Array allocation: arbitrary n

  alloc.allocate(n);

  std::vector - std::deque - std::unordered_set
  std::unordered_map - std::unordered_multiset
  std::unordered_multimap
  
(B) Node allocation: n = 1

  alloc.allocate(1);

  std::list - std::forward_list - std::set - std::multiset
  std::map - std::multimap - std::deque - std::unordered_set
  std::unordered_map - std::unordered_multiset
  std::unordered_multimap

From 12 containers

  - 10 perform node allocation (excluding std::deque).
  - 6 perform exclusively node-allocation.
  - 4 perform both node and array allcation.

Seems like node-allocation is important concept in containers,
but how is this information useful?

Node allcation
======================================================================

Node allocation

  - Simple and straighforward implementation.
  - Suitable for realtime/embedded.
  - Reduces memory fragmentation.
  - Basic building block used in array allcations as well.

  1 - Get a big block of memory.
  2 - Divide it in n small blocks.
  3 - Link the blocks. (Forward list).
        _____   _____   _____   _____   _____   _____    _____   
       |     | |     | |     | |     | |     | |     |  |     |     
       |     V |     V |     V |     V |     V |     V  |     V   
  |_______|_______|_______|_______|_______|_______|_______|   0
     /\    
     ||      
     ||   
    Head

Array allocation

  - Complex.
  - Has to handle different sizes.
  - Many possible strategies.
  - No silver bullet. Every problem requires a different approach.
  - Users do not want to care about this unless there is need.
  - malloc: suitable for large memory blocks, overused, hundreds of
    loc, system calls, etc.
  - May use node allocation as a building block.

Avoiding (or preventing) array allocation.
======================================================================

It is actually not totally true that containers ask blocks with the
same size.

  - Not guaranteed by the standard.
  - We do not know what a container will do with the allocator
    and have to plan for everything (bad).
  - Allocator interface allow them if they want

   Allocator::allocate(n);
   Allocator::deallocate(p, n);

Possible solution: Check n every allocation

  pointer allocate(size_type n)
  {
    if (n == 1)
      return allocate_node();
    return allocate(n);
  }

  - If n != 1 always. No node allocation takes place.
  - Runtime condition if (n == 1) is most of the time useless.
  - If I (as user) want array allocation, I can built it up
    on the allocator where I have control and not on the containers
    where I do not.
  - Users should be able to prevent it from happening. Example

    std::array<char, 10 * n> arena = {{}};
    my::allocator<int> alloc(arena);
    std::forward_list<int> l(alloc);
    l = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

  I do not know how to implement this if array allocation takes place. 

Other solutions
======================================================================

Why not simply assert(n == 1) or throw?

  - Unportable code. May work with some libraries and not
  - Throw: Should be used if I ran out of memory not if allocator
    does not provide array allocation.

Proposed solution
======================================================================

 - Split the concept of node allocation from array allocation.
 - std::allocator_traits offers interface for both.

   allocate(n); // arbitray n
   deallocate(p, n); // arbitray n

   allocate_node(n);
   deallocate_node(p, n);

   // Ensures array allocation does not take place in that allocator.
   node_allocation_only = std::true_type.

Benefits
======================================================================

Performance, realtime, low-fragmentation.



