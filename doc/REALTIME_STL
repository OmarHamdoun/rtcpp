WARNING: Under construction

STL on embedded/realtime systems
===========================================================

Target audience

  - Embedded/Realtime developers
  - High performance, high availability.

STL on embedded/realtime systems
===========================================================

  - Stands for "Standard Template Library"

  - Generic interface for *data structures* and *algorithms*.

  - *Data structures* are presented in the form of containers.

    std::vector, std::list, std::map, std::set, etc.

  - *Algorithms* are provided as member and non-member functions.

    Member: std::list<int>::sort, std::set<int>::find, etc.
    Non-Member: std::sort, std::find, etc.

  - Non-member algorithms do not interact directly with containers,
    they act on ranges specified by iterators.

    std::sort(std::begin(v), std::end(v));

  - There are five types of iterators: Input, output, forward,
    bidirectional and random access iterators.
    Think of them as generalization of pointers.

  STL = containers + iterators + algorithms + ....

===========================================================

  Containers are grouped together according to their properties.
  Most important properties:

  (A) Elements ordering and access.
  (B) Iterators they provide.
  (C) Memory use: Linked or sequential allocation.

  Sequence containers (sequential access)

    std::vector - std::array - std::deque - std::list - std::forward_list.

  Ordered associative containers (quick search - O(lon(n)))

    std::set - std::multiset - std::map - std::multimap

  Unordered associative containers (hashed, O(n) search)

    std::unordere_set - std::unordere_map -std::unordered_multiset
    std::unordered_multimap

===========================================================

Containers classified according to the iterators they provide.

  Input/Output ===> Most important for streams.

  Forward: ++p;

    std::forward_list
    std::unordere_set
    std::unordere_map
    std::unordered_multiset
    std::unordered_multimap

  Bidirectional: ++p, --p.

    std::list
    std::set
    std::multiset
    std::map
    std::multimap

  Random Access. ++p, --p, p[n].

    std::vector
    std::array
    std::deque

===========================================================

Memory use: Linked or sequential allocation.

  A) Sequential allocation. Consecutive elements are in consecutive memory
     addresses.

    Example

    int a[10];             // Built in the language.
    std::array<int, 10> a; // Library container. Fixed size.
    std::vector<int> a;    // Library container. Variable size. 

  B) Linked allocation. All other containers. 

  - No ordering regarding memory addresses.
  - Nodes pointing to each other.
  - Allocate blocks that always have the same size.

===========================================================

How are containers implemented?

  Not specified by the standard. Only complexity guarantees
  for its member functions are provided (Big O).
    
  Take insertion as an example.

    - std::list: O(1)
    - std::map: O(log(n))
    - std::vector: O(n)

  Memory use not specified.

  - Does std::sort allocates auxiliary buffers?

===========================================================

Should you use STL for development? Why?

  - Yes, by default.
  - Makes your intentions obvious.

    int n = std::count(std::begin(v), std::end(v), 10);

  - Designed by experts, high quality implementations, tested.
  - You do not want to reinvent the square will.
  - It is very unlikely you need a general purpose algorithm
    that is not here.

===========================================================

Realtime guarantees - Where the problem begins.

  - Realtime does not mean fast.
  - Realtime is about time guarantees.
  - Not all operations in the STL are realtime.

  Source of problems

  - Dynamic memory allocations.
  - Memory fragmentation.

  Fortunately enough, STL containers offers control over
  containers memory use: Allocators.

  When you use std::vector<int> it means on reality

  std::vector<int, std::allocator<int>>

  The applies for all containers except std::array
  whose arrays go necessarily on the stack.

What are allocators
===========================================================

When a container needs memory it ALWAYS requests it from the
allocator. Thats the entry point for customization of memory
allocations.

  Memory allocations in c++.

  Static: Space for an int on the stack.

  int a; 

  Dynamic:

  int* a = static_cast<int*>malloc(sizeof *a); // C-like, raw memory.
  int* a = new int; // c++, calls constructors.

  On containers

  std::allocator<int> alloc;
  int* a = alloc.allocate(1);

You can write ou own allocator
===========================================================

  You can write your own allocators and pass them to containers.
  std::vector<int, my::allocator<int>> a;

  All internal memory allocators are requested from the allocator.

  You may need some state on the allocator.

  int buffer[100];
  my::allocator<int> alloc(buffer);
  std::vector<int, my::allocator<int>> a;

  All allocations are performed inside the buffer.

How do I write an allocator?
===========================================================



===========================================================

Dynamic memory allocation with malloc.

  - Malloc is a general purpose memory allocator suitable for
    large memory blocks.
  - Hundreds of lines of code with unpredictable behaviour.
  - Performs system calls.
  - Overused as there is no easy way to avoid it in the STL.

===========================================================

Memory in a program (simplified)

  There are two main "places" in a program where we can store our data
  during program execution:
  
  A) The Stack. Grows towards lower memory addresses.
  B) The Heap. Grows towards higher memory addresses.

  Diagram:

  |         Heap                                        Stack        | 
  |     ---------->                                  <----------     |  
  |__________________________________________________________________|
  0                                                               192873
                       Program address space


Memory allocation on the stack and heap
===========================================================

  A) Stack.

  - Allocation and deallocation is automatic and have no overhead.
  - Only a pointer is adjusted.
  - Limited capacity.
  - Lifetime limited to the function scope where the variable was
    allocated (declared).

  Example:

  int a; // Allocates space for an integer on the stack.

  B) Heap.
  
  - Explicitly requested by the programmer through operator new or malloc.
  - The algorithm used to find space is not standardized (platform dependent).
  - Space is requested to the operating system through system calls.
  - Even though the whole complexity is hidden from the programmer,
    behind his back there are many things going on.
  - Usually unpredictable performance. Depends on things like fragmentation.

  Example:

  T* t = new T; // find space for sizeof (T) on the heap.

Where do containers store their elements?
===========================================================

  - Built-in arrays and std::array use exclusively the stack.
  - All other containers request memory from their allocator.

  std::vector<int, std::allocator<int>> a;

